/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}\n\nclient<llm> Gemini25Flash {\n  provider \"google-ai\"\n  options {\n    model \"gemini-2.5-flash\"\n    api_key env.GOOGLE_API_KEY\n  }\n}\n\nclient<llm> Gemini25Pro {\n  provider google-ai\n  options {\n    model \"gemini-2.5-pro\"\n    api_key env.GOOGLE_API_KEY\n  }\n}",
  "entity.baml": "enum Entity {\n    MSFT\n    TGO\n    AAPL\n    GOOGL\n    AMZN\n    NVDA\n    INTC\n    CSCO\n    ORCL\n    IBM\n}\n\nenum Sentiment {\n    POSITIVE\n    NEGATIVE\n    NEUTRAL\n}\n\nclass EntitySentiment {\n    entity Entity @description(\"The entity that is being mentioned\")\n    sentiment Sentiment @description(\"The sentiment with which the entity is being mentioned\")\n}   \n\nfunction ExtractEntitySentiments(message: string) -> EntitySentiment[] {\n    client Gemini25Flash\n    prompt #\"\n\n        Extract the entities and their sentiments from the following message:\n        <message>\n        {{ message }}\n        </message>\n\n        {{ ctx.output_format }}\n    \"#\n\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.90.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "utils.baml": "class NameInformation {\n    firstName string @description(\"The first name of the person\")\n    lastName string @description(\"The last name of the person\")\n}\n\nfunction ExtractName(message: string) -> NameInformation {\n    client Gemini25Flash\n    prompt #\"\n\n        Extract the first and last name from the following message based on the following description:\n        <message>\n        {{ message }}\n        </message>\n\n\n        {{ ctx.output_format }}\n\n    \"#\n}\n\ntest TestNameExtraction {\n    functions [ExtractName]\n    args {\n        message \"Hello, my name is Kyle Mistele and I live at 2820 McKinnon Street in Dallas TX\"\n    }\n\n    @@check( check_first_name, {{ this.firstName == \"Kyle\" }})\n    @@check( check_last_name, {{ this.lastName == \"Mistele\" }})\n\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}